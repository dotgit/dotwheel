<?php

namespace Dotwheel\Nls;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-05 at 17:07:18.
 */
class TextTest extends \PHPUnit_Framework_TestCase
{
    const DOMAIN = 'tests';

    /**
     * Reset Text class
     */
    public static function setUpBeforeClass()
    {
        Text::$pluralForms = 0;
        Text::$domainTranslations = array();
        Text::$domain = 'messages';
    }

    /**
     * Checks initial state
     */
    public function testInitialState()
    {
        // starts uninitialized
        $this->assertEmpty(Text::$pluralForms);
        $this->assertEmpty(Text::$domainTranslations);
        $this->assertEquals('messages', Text::$domain);
    }

    /**
     * @covers Dotwheel\Nls\Text::binddomain
     * @dataProvider binddomainProvider
     */
    public function testBinddomain($lang, $expected_plurals)
    {
        Text::binddomain(self::DOMAIN, __DIR__.'/locale', $lang);
        $this->assertEquals($expected_plurals, Text::$pluralForms);
        $this->assertNotEmpty(Text::$domainTranslations);
        $this->assertEquals(self::DOMAIN, Text::$domain);
    }

    public function binddomainProvider()
    {
        return array(
            'english locale'=>array('en', '($n != 1)'),
            'french locale'=>array('fr', '($n > 1)'),
        );
    }

    /**
     * @covers Dotwheel\Nls\Text::domain
     */
    public function testDomain()
    {
        Text::binddomain(self::DOMAIN, __DIR__.'/locale', 'fr');
        $domain = Text::$domain;
        Text::domain('unknown');
        $this->assertEquals('unknown', Text::$domain, 'current domain is reset');
        $this->assertEquals('Next', Text::_('Next'), 'translation from non-existent current domain');
        Text::domain($domain);
        $this->assertEquals('Suivant', Text::_('Next'), 'translation from existant current domain');
    }

    /**
     * @covers Dotwheel\Nls\Text::_
     */
    public function test_()
    {
        $this->assertEquals('Suivant', Text::_('Next'), 'existing translation');
        $unknown = 'non-existent '.rand(100, 999);
        $this->assertEquals($unknown, Text::_($unknown), 'non-existent translation');
    }

    /**
     * @covers Dotwheel\Nls\Text::dget
     */
    public function testDget()
    {
        Text::domain('unknown');
        $this->assertEquals('Next', Text::_('Next'), 'translation from non-existent current domain');
        $this->assertEquals('Suivant', Text::dget(self::DOMAIN, 'Next'), 'translation from '.self::DOMAIN);
        Text::domain(self::DOMAIN);
    }

    /**
     * @covers Dotwheel\Nls\Text::pget
     */
    public function testPget()
    {
        $this->assertEquals('Verte', Text::pget('grass', 'Green'), 'existing translation using context');
        $unknown = 'non-existent '.rand(100, 999);
        $this->assertEquals($unknown, Text::pget('grass', $unknown), 'non-existent translation using context');
    }

    /**
     * @covers Dotwheel\Nls\Text::dpget
     */
    public function testDpget()
    {
        $this->assertEquals('Green', Text::dpget('unknown', 'grass', 'Green'), 'translation from non-existent domain');
        $this->assertEquals('Verte', Text::dpget(self::DOMAIN, 'grass', 'Green'), 'translation from '.self::DOMAIN);
    }

    /**
     * @covers Dotwheel\Nls\Text::nget
     * @dataProvider ngetProvider
     */
    public function testNget($n, $expected)
    {
        $this->assertEquals($expected, sprintf(Text::nget('%u line', '%u lines', $n), $n));
    }

    /**
     * @covers Dotwheel\Nls\Text::dnget
     * @dataProvider ngetProvider
     */
    public function testDnget($n, $expected)
    {
        Text::domain('unknown');
        $this->assertEquals($expected, sprintf(Text::dnget(self::DOMAIN, '%u line', '%u lines', $n), $n));
        Text::domain(self::DOMAIN);
    }

    public function ngetProvider()
    {
        return array(
            'zero lines'=>array(0, '0 ligne'),
            'one ligne'=>array(1, '1 ligne'),
            'two lines'=>array(2, '2 lignes'),
            'two lines'=>array(5, '5 lignes'),
        );
    }

    /**
     * @covers Dotwheel\Nls\Text::pnget
     * @dataProvider pgetProvider
     */
    public function testPnget($n, $expected)
    {
        $this->assertEquals($expected, sprintf(Text::pnget('line', '%u sent', '%u sent', $n), $n));
    }

    /**
     * @covers Dotwheel\Nls\Text::dpnget
     * @dataProvider pgetProvider
     */
    public function testDpnget($n, $expected)
    {
        Text::domain('unknown');
        $this->assertEquals($expected, sprintf(Text::dpnget(self::DOMAIN, 'line', '%u sent', '%u sent', $n), $n));
        Text::domain(self::DOMAIN);
    }

    public function pgetProvider()
    {
        return array(
            'zero lines'=>array(0, '0 envoyée'),
            'one ligne'=>array(1, '1 envoyée'),
            'two lines'=>array(2, '2 envoyées'),
            'two lines'=>array(5, '5 envoyées'),
        );
    }
}
