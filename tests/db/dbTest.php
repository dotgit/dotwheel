<?php

namespace Dotwheel\Db;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-06 at 15:53:38.
 */
class DbTest extends \PHPUnit_Framework_TestCase
{
    const DB        = 'test';
    const TABLE     = 'test';
    const IDX_ID    = 'idx_id';
    const C_SECTION = 'tt_section';
    const C_ID      = 'tt_id';
    const C_NAME    = 'tt_name';

    protected static $conn;

    public static function setUpBeforeClass()
    {
        self::$conn = Db::connect(null, null, null, self::DB);
        self::assertNotEmpty(self::$conn);
        Db::dml(sprintf(
<<<EOsql
create temporary table if not exists %s (
  %s integer unsigned not null,
  %s integer unsigned not null,
  %s varchar(255) not null,
  primary key(%s, %s),
  unique key %s (%s, %s)
)
EOsql
            ,
            self::TABLE,
            self::C_SECTION,
            self::C_ID,
            self::C_NAME,
            self::C_SECTION, self::C_ID,
            self::IDX_ID, self::C_ID, self::C_NAME
        ));
        Db::dml(sprintf(
<<<EOsql
insert into %s (%s, %s, %s)
values
(1, 1, 'first one'),
(1, 2, 'second one'),
(1, 3, 'third one'),
(2, 1, 'first two'),
(2, 2, 'second two'),
(2, 3, 'third two'),
(3, 1, 'first three'),
(3, 2, 'second three'),
(3, 3, 'third three')
EOsql
            ,
            self::TABLE,
            self::C_SECTION,
            self::C_ID,
            self::C_NAME
        ));
    }

    /**
     * @covers Dotwheel\Db\Db::connect
     */
    public function testConnect()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::fetchRow
     */
    public function testFetchRow()
    {
        $row = Db::fetchRow(sprintf(
            "select %s from %s where %s = 1 and %s = 3",
            self::C_NAME,
            self::TABLE,
            self::C_SECTION,
            self::C_ID
        ));
        $this->assertArrayHasKey(self::C_NAME, $row);
        $this->assertEquals('third one', $row[self::C_NAME]);
    }

    /**
     * @covers Dotwheel\Db\Db::fetchRowDEBUG
     */
    public function testFetchRowDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::fetchList
     */
    public function testFetchList()
    {
        $list = Db::fetchList(sprintf(
            "select %s, %s from %s where %s = 2 order by 1",
            self::C_ID,
            self::C_NAME,
            self::TABLE,
            self::C_SECTION
        ));
        $this->assertNotEmpty($list);
        $this->assertCount(3, $list);
        $this->assertEquals('third two', $list[3]);
    }

    /**
     * @covers Dotwheel\Db\Db::fetchListDEBUG
     */
    public function testFetchListDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::fetchHash
     */
    public function testFetchHash()
    {
        $hash = Db::fetchHash(sprintf(
            "select * from %s where %s = 3 order by 1",
            self::TABLE,
            self::C_SECTION
        ), self::C_ID);
        $this->assertNotEmpty($hash);
        $this->assertCount(3, $hash);
        $this->assertEquals('third three', $hash[3][self::C_NAME]);
    }

    /**
     * @covers Dotwheel\Db\Db::fetchHashDEBUG
     */
    public function testFetchHashDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::fetchArray
     */
    public function testFetchArray()
    {
        $array = Db::fetchArray(sprintf(
            "select * from %s where %s = 1 order by 1",
            self::TABLE,
            self::C_SECTION
        ));
        $this->assertNotEmpty($array);
        $this->assertCount(3, $array);
        $this->assertEquals('first one', $array[0][self::C_NAME]);
    }

    /**
     * @covers Dotwheel\Db\Db::fetchArrayDEBUG
     */
    public function testFetchArrayDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::fetchCsv
     */
    public function testFetchCsv()
    {
        $csv = Db::fetchCsv(sprintf(
            "select %s from %s where %s = 2 order by %s",
            self::C_NAME,
            self::TABLE,
            self::C_SECTION,
            self::C_ID
        ));
        $this->assertNotEmpty($csv);
        $this->assertEquals('first two,second two,third two', $csv);
    }

    /**
     * @covers Dotwheel\Db\Db::fetchCsvDEBUG
     */
    public function testFetchCsvDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::handlerReadPrimary
     */
    public function testHandlerReadPrimary()
    {
        $row = Db::handlerReadPrimary(self::TABLE, array(1, 3));
        $this->assertArrayHasKey(self::C_NAME, $row);
        $this->assertEquals('third one', $row[self::C_NAME]);
    }

    /**
     * @covers Dotwheel\Db\Db::handlerReadIndex
     */
    public function testHandlerReadIndex()
    {
        $row = Db::handlerReadIndex(self::TABLE, '`PRIMARY`', array(1, 2));
        $this->assertArrayHasKey(self::C_NAME, $row);
        $this->assertEquals('second one', $row[self::C_NAME]);
    }

    /**
     * @covers Dotwheel\Db\Db::handlerReadPrimaryMulti
     */
    public function testHandlerReadPrimaryMulti()
    {
        $rows = Db::handlerReadPrimaryMulti(self::TABLE, array(array(1, 1), array(2, 2), array(3, 3)));
        $this->assertCount(3, $rows);
        $this->assertEquals('third three', $rows['3,3'][self::C_NAME]);
    }

    /**
     * @covers Dotwheel\Db\Db::handlerReadIndexMulti
     */
    public function testHandlerReadIndexMulti()
    {
        $rows = Db::handlerReadIndexMulti(self::TABLE, self::IDX_ID, array(array(1, "'first two'"), array(3, "'third one'")));
        $this->assertCount(2, $rows);
        $this->assertEquals(2, $rows["1,'first two'"][self::C_SECTION]);
    }

    /**
     * @covers Dotwheel\Db\Db::dml
     */
    public function testDml()
    {
        $dml = Db::dml(sprintf(
<<<EOsql
insert into %s (%s, %s, %s)
values
(4, 1, 'first four'),
(4, 2, 'second four'),
(4, 3, 'third four')
EOsql
            ,
            self::TABLE,
            self::C_SECTION,
            self::C_ID,
            self::C_NAME
        ));
        $this->assertGreaterThan(2, $dml, 'more than two rows inserted');

        $csv = Db::fetchCsv(sprintf(
            "select %s from %s where %s = 4 order by %s",
            self::C_NAME,
            self::TABLE,
            self::C_SECTION,
            self::C_ID
        ));
        $this->assertNotEmpty($csv);
        $this->assertEquals('first four,second four,third four', $csv);
    }

    /**
     * @covers Dotwheel\Db\Db::dmlDEBUG
     */
    public function testDmlDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::dmlBind
     */
    public function testDmlBind()
    {
        $dml = Db::dmlBind(
            sprintf(
<<<EOsql
insert into %s (%s, %s, %s)
values
(?, ?, ?),
(?, ?, ?),
(?, ?, ?)
EOsql
                ,
                self::TABLE,
                self::C_SECTION,
                self::C_ID,
                self::C_NAME
            ),
            'iisiisiis',
            array(
                5, 1, 'first five',
                5, 2, 'second five',
                5, 3, 'third five'
            )
        );
        $this->assertGreaterThan(2, $dml, 'more than two rows inserted');

        $csv = Db::fetchCsv(sprintf(
            "select %s from %s where %s = 5 order by %s",
            self::C_NAME,
            self::TABLE,
            self::C_SECTION,
            self::C_ID
        ));
        $this->assertNotEmpty($csv);
        $this->assertEquals('first five,second five,third five', $csv);
    }

    /**
     * @covers Dotwheel\Db\Db::dmlBindDEBUG
     */
    public function testDmlBindDEBUG()
    {
    }

    /**
     * @covers Dotwheel\Db\Db::insertId
     */
    public function testInsertId()
    {
        $dml1 = Db::dml(sprintf(
<<<EOsql
create temporary table if not exists t2 (
  %s integer unsigned not null auto_increment primary key,
  %s varchar(255) not null
)
select %s, %s from %s where %s = 5 order by 1
EOsql
            ,
            self::C_ID,
            self::C_NAME,
            self::C_ID,
            self::C_NAME,
            self::TABLE,
            self::C_SECTION
        ));
        $this->assertNotEmpty($dml1);

        $dml2 = Db::dml(sprintf("insert into t2 (%s) values ('fourth five')", self::C_NAME));
        $this->assertNotEmpty($dml2);

        $id = Db::insertId();
        $this->assertEquals(4, $id);
    }

    /**
     * @covers Dotwheel\Db\Db::escapeInt
     */
    public function testEscapeInt()
    {
        $this->assertEquals('NULL', Db::escapeInt(null));
        $this->assertEquals(0, Db::escapeInt(0));
        $this->assertEquals(4, Db::escapeInt(4));
        $this->assertEquals(0, Db::escapeInt('not-integer'));
    }

    /**
     * @covers Dotwheel\Db\Db::escapeIntCsv
     */
    public function testEscapeIntCsv()
    {
        $this->assertEquals('NULL', Db::escapeIntCsv(null));
        $this->assertEquals(0, Db::escapeIntCsv(0));
        $this->assertEquals('1,2,3', Db::escapeIntCsv(array(1,2,3)));
        $this->assertEquals('1,3', Db::escapeIntCsv(array(1,null,3,'xxx')));
        $this->assertEquals('NULL', Db::escapeIntCsv(array('xxx')));
        $this->assertEquals(0, Db::escapeIntCsv('xxx'));
    }

    /**
     * @covers Dotwheel\Db\Db::wrapChar
     */
    public function testWrapChar()
    {
        $this->assertEquals('NULL', Db::wrapChar(null));
        $this->assertEquals("'value'", Db::wrapChar('value'));
        $this->assertEquals("'o\\'value'", Db::wrapChar("o'value"));
        $this->assertEquals("'o\\nvalue'", Db::wrapChar("o\nvalue"));
    }

    /**
     * @covers Dotwheel\Db\Db::wrapCharCsv
     */
    public function testWrapCharCsv()
    {
        $this->assertEquals('NULL', Db::wrapCharCsv(null));
        $this->assertEquals("'value'", Db::wrapCharCsv('value'));
        $this->assertEquals("'value','o\\'value','o\\nvalue'", Db::wrapCharCsv(array('value', "o'value", "o\nvalue")));
    }
}
